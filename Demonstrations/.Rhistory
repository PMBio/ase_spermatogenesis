print("Not enough intervals to test")
return(list(NA, NA, NA, NA))
}
data_plot_ratio <- data_plot_ratio[intervals_test, ]
x_test <- as.double(data_plot_ratio$Interval)
y1_test <- logit(data_plot_ratio$FC_F0)
y2_test <- logit(data_plot_ratio$FC_F1)
X_augmented = as.matrix(data.frame(c(x_test, x_test), c(rep(0, length(x_test)), rep(1, length(x_test)))))
Y_augmented = as.matrix(data.frame(c(y1_test, y2_test), c(rep(0, length(x_test)), rep(1, length(x_test)))))
not_exclude <- !is.infinite(Y_augmented[,1])
if(sum(!not_exclude) / length(not_exclude) > 0.1){
print("Warning: More than 10% of values are NA")
}
X_augmented_run <- X_augmented[not_exclude, ]
Y_augmented_run <- Y_augmented[not_exclude, ]
tryCatch({
gp_res_parent_constant = py$fit_vanilla_4(X_augmented_run, Y_augmented_run, model = "conserved")
gp_res_parent_cis_static = py$fit_vanilla_4(X_augmented_run, Y_augmented_run, model = "cis_static")
gp_res_parent_cis_dynamic = py$fit_vanilla_4(X_augmented_run, Y_augmented_run, model = "cis_dynamic")
gp_res_parent_trans_static = py$fit_vanilla_4(X_augmented_run, Y_augmented_run, model = "trans_static")
gp_res_parent_trans_dynamic = py$fit_vanilla_4(X_augmented_run, Y_augmented_run, model = "trans_dynamic")
return(list(gp_res_parent_constant, gp_res_parent_cis_static, gp_res_parent_cis_dynamic, gp_res_parent_trans_static,
gp_res_parent_trans_dynamic))
}, error=function(cond) {
return(NA)
})
}
allelic_ratios
run_coreg_gp_python_expressed_intervals_new("Dnajc2")
allelic_ratios
ratios_all_genes <- readRDS("./Scripts/Demonstrations/normalized_ratios_trans.rds")
ratios_all_genes <- readRDS("./normalized_ratios_trans.rds")
ratios_all_genes
lapply(ratios_all_genes, function(x){x[c("Ddt", "Prm1"), ]})
lapply(ratios_all_genes, function(x){x[c("Ddt", "Tnp2"), ]})
saveRDS(lapply(ratios_all_genes, function(x){x[c("Ddt", "Tnp2"), ]}), "./test_ratios_trans.rds")
allelic_ratios <- readRDS("./test_ratios_trans.rds")
allelic_ratios
# ratios_all_genes <- readRDS("./normalized_ratios_trans.rds")
# saveRDS(lapply(ratios_all_genes, function(x){x[c("Ddt", "Tnp2"), ]}), "./test_ratios_trans.rds")
total_exp <- readRDS("./Data/processed/total_exp.rds")
# ratios_all_genes <- readRDS("./normalized_ratios_trans.rds")
# saveRDS(lapply(ratios_all_genes, function(x){x[c("Ddt", "Tnp2"), ]}), "./test_ratios_trans.rds")
total_exp <- readRDS("../../Data/processed/total_exp.rds")
total_exp
ratios_all_genes <- readRDS("./normalized_ratios_trans.rds")
saveRDS(lapply(ratios_all_genes, function(x){x[c("Dnajc2", "Ddt", "Tnp2"), ]}), "./test_ratios_trans.rds")
total_exp <- readRDS("../../Data/processed/total_exp.rds")
total_exp <- total_exp[c("Dnajc2", "Ddt", "Tnp2"), ]
saveRDS(total_exp, "./test_counts_trans.rds")
allelic_ratios <- readRDS("./test_ratios_trans.rds")
total_exp <- readRDS("./test_counts_trans.rds")
plot_cis_trans_gene_mean("Dnajc2")
plot_cis_trans_gene_mean
plot_cis_trans_gene_mean("Ddt")
plot_cis_trans_gene_mean("Tnp2")
# Not run -- subset data on genes to show
ratios_all_genes <- readRDS("./normalized_ratios_trans.rds")
saveRDS(lapply(ratios_all_genes, function(x){x[c("Dnajc2", "Ddt", "Tex21"), ]}), "./test_ratios_trans.rds")
total_exp <- readRDS("../../Data/processed/total_exp.rds")
total_exp <- total_exp[c("Dnajc2", "Ddt", "Tex21"), ]
saveRDS(total_exp, "./test_counts_trans.rds")
allelic_ratios <- readRDS("./test_ratios_trans.rds")
total_exp <- readRDS("./test_counts_trans.rds")
plot_cis_trans_gene_mean("Tex21")
# Not run -- subset data on genes to show
ratios_all_genes <- readRDS("./normalized_ratios_trans.rds")
saveRDS(lapply(ratios_all_genes, function(x){x[c("Dnajc2", "Ddt", "Tex21"), ]}), "./test_ratios_trans.rds")
total_exp <- readRDS("../../Data/processed/total_exp.rds")
total_exp <- total_exp[c("Dnajc2", "Ddt", "Tex21"), ]
saveRDS(total_exp, "./test_counts_trans.rds")
allelic_ratios <- readRDS("./test_ratios_trans.rds")
total_exp <- readRDS("./test_counts_trans.rds")
plot_cis_trans_gene_mean("Tex21")
allelic_ratios <- readRDS("./test_ratios_trans.rds")
total_exp <- readRDS("./test_counts_trans.rds")
run_coreg_gp_python_expressed_intervals_new <- function(gene, model = "full"){
rs_f0_noStab <- allelic_ratios[[1]]
rs_f1_noStab <- allelic_ratios[[2]]
data_plot_ratio <- data.frame(
FC_F0 = rs_f0_noStab[gene, ],
FC_F1 = rs_f1_noStab[gene, ],
Interval = 1:ncol(rs_f0_noStab)
)
# get intervals in which gene is expressed
intervals_test <- total_exp[gene, ] > 0.5
print(table(intervals_test))
if (sum(intervals_test) < 5){
print("Not enough intervals to test")
return(list(NA, NA, NA, NA))
}
data_plot_ratio <- data_plot_ratio[intervals_test, ]
x_test <- as.double(data_plot_ratio$Interval)
y1_test <- logit(data_plot_ratio$FC_F0)
y2_test <- logit(data_plot_ratio$FC_F1)
X_augmented = as.matrix(data.frame(c(x_test, x_test), c(rep(0, length(x_test)), rep(1, length(x_test)))))
Y_augmented = as.matrix(data.frame(c(y1_test, y2_test), c(rep(0, length(x_test)), rep(1, length(x_test)))))
not_exclude <- !is.infinite(Y_augmented[,1])
if(sum(!not_exclude) / length(not_exclude) > 0.1){
print("Warning: More than 10% of values are NA")
}
X_augmented_run <- X_augmented[not_exclude, ]
Y_augmented_run <- Y_augmented[not_exclude, ]
tryCatch({
gp_res_parent_constant = py$fit_vanilla_4(X_augmented_run, Y_augmented_run, model = "conserved")
gp_res_parent_cis_static = py$fit_vanilla_4(X_augmented_run, Y_augmented_run, model = "cis_static")
gp_res_parent_cis_dynamic = py$fit_vanilla_4(X_augmented_run, Y_augmented_run, model = "cis_dynamic")
gp_res_parent_trans_static = py$fit_vanilla_4(X_augmented_run, Y_augmented_run, model = "trans_static")
gp_res_parent_trans_dynamic = py$fit_vanilla_4(X_augmented_run, Y_augmented_run, model = "trans_dynamic")
return(list(gp_res_parent_constant, gp_res_parent_cis_static, gp_res_parent_cis_dynamic, gp_res_parent_trans_static,
gp_res_parent_trans_dynamic))
}, error=function(cond) {
return(NA)
})
}
allelic_ratios
run_coreg_gp_python_expressed_intervals_new("Ddt")
gp_results <- lapply(rownames(allelic_ratios), run_coreg_gp_python_expressed_intervals_new)
run_coreg_gp <- function(gene, model = "full"){
rs_f0_noStab <- allelic_ratios[[1]]
rs_f1_noStab <- allelic_ratios[[2]]
data_plot_ratio <- data.frame(
FC_F0 = rs_f0_noStab[gene, ],
FC_F1 = rs_f1_noStab[gene, ],
Interval = 1:ncol(rs_f0_noStab)
)
# get intervals in which gene is expressed
intervals_test <- total_exp[gene, ] > 0.5
print(table(intervals_test))
if (sum(intervals_test) < 5){
print("Not enough intervals to test")
return(list(NA, NA, NA, NA))
}
data_plot_ratio <- data_plot_ratio[intervals_test, ]
x_test <- as.double(data_plot_ratio$Interval)
y1_test <- logit(data_plot_ratio$FC_F0)
y2_test <- logit(data_plot_ratio$FC_F1)
X_augmented = as.matrix(data.frame(c(x_test, x_test), c(rep(0, length(x_test)), rep(1, length(x_test)))))
Y_augmented = as.matrix(data.frame(c(y1_test, y2_test), c(rep(0, length(x_test)), rep(1, length(x_test)))))
not_exclude <- !is.infinite(Y_augmented[,1])
if(sum(!not_exclude) / length(not_exclude) > 0.1){
print("Warning: More than 10% of values are NA")
}
X_augmented_run <- X_augmented[not_exclude, ]
Y_augmented_run <- Y_augmented[not_exclude, ]
tryCatch({
gp_res_parent_constant = py$fit_vanilla_4(X_augmented_run, Y_augmented_run, model = "conserved")
gp_res_parent_cis_static = py$fit_vanilla_4(X_augmented_run, Y_augmented_run, model = "cis_static")
gp_res_parent_cis_dynamic = py$fit_vanilla_4(X_augmented_run, Y_augmented_run, model = "cis_dynamic")
gp_res_parent_trans_static = py$fit_vanilla_4(X_augmented_run, Y_augmented_run, model = "trans_static")
gp_res_parent_trans_dynamic = py$fit_vanilla_4(X_augmented_run, Y_augmented_run, model = "trans_dynamic")
return(list(gp_res_parent_constant, gp_res_parent_cis_static, gp_res_parent_cis_dynamic, gp_res_parent_trans_static,
gp_res_parent_trans_dynamic))
}, error=function(cond) {
return(NA)
})
}
allelic_ratios <- readRDS("./test_ratios_trans.rds")
total_exp <- readRDS("./test_counts_trans.rds")
gp_results <- lapply(rownames(allelic_ratios), run_coreg_gp)
gp_results
rownames(allelic_ratios)
gp_results <- lapply(rownames(total_exp), run_coreg_gp)
gp_results
names(gp_results) <- rownames(total_exp)
plot_cis_trans_gene_mean
plot_cis_trans_gene_mean <- function(gene){
asd <- results_per_gene_expressed_intervals[[gene]]
for_plotting <- lapply(1:length(asd[[5]][[2]]), function(i){
xx = asd[[5]][[2]][[i]]
xx = data.frame(do.call("cbind", xx))
xx$Sample = i
xx$X3 <- sqrt(xx$X3)
xx})
for_plotting_merged <- do.call("rbind", for_plotting)
for_plotting_merged$Sample <- as.factor(for_plotting_merged$Sample)
for_plotting_merged$mean <- for_plotting_merged$X2
data_plot <- data.frame(
"F0_P" = data_f0_b6[gene, ],
"F0_M" = data_f0_cast[gene, ],
"F1_P" = data_f1_b6[gene, ],
"F1_M" = data_f1_cast[gene, ]
)
norm_factors <- c(sum(colSums(data_f0_b6)),
sum(colSums(data_f0_cast)))
norm_factors <- norm_factors / norm_factors[[1]]
data_plot[,1:2] <- data.frame(t(t(data_plot[,1:2]) / norm_factors))
data_plot$Interval <- 1:nrow(data_plot)
for_plotting_merged$Sample <- ifelse(for_plotting_merged$Sample == 1, "F0", "F1")
ggplot(for_plotting_merged, aes(X1, y = rev_logit(X2), col = Sample)) +
geom_line(linetype = "dashed", size = 1.5) +
scale_color_manual(values = c("F0" = "black", "F1" = "darkgrey")) +
# geom_ribbon(aes(ymin = rev_logit(error_lower), ymax = rev_logit(error_upper), fill = Sample),
#             alpha = 0.2) +
theme(legend.position="top") +
geom_point(data = data_plot, aes(Interval, (F0_P) / (F0_M + F0_P)), col = "black", size = 2) +
geom_point(data = data_plot, aes(Interval, (F1_P) / (F1_M + F1_P)), col = "darkgrey", size = 2) +
xlim(0, 100) + scale_fill_manual(values = c("red", "darkgrey")) + ylim(c(0, 1)) + xlab("Pseudotime") +
ylab("Allelic Imbalance") + theme_classic() + ggtitle(gene) +
geom_hline(yintercept = 0.5, linetype = "dashed") +
theme(text = element_text(size = 30), legend.position = "None") +
scale_x_continuous(breaks = c(0, 50, 100)) +
scale_y_continuous(breaks = c(0, 0.5, 1), limits = c(0, 1))
}
plot_cis_trans_gene_mean("Dnajc2")
plot_cis_trans_gene_mean <- function(gene){
asd <- gp_results[[gene]]
for_plotting <- lapply(1:length(asd[[5]][[2]]), function(i){
xx = asd[[5]][[2]][[i]]
xx = data.frame(do.call("cbind", xx))
xx$Sample = i
xx$X3 <- sqrt(xx$X3)
xx})
for_plotting_merged <- do.call("rbind", for_plotting)
for_plotting_merged$Sample <- as.factor(for_plotting_merged$Sample)
for_plotting_merged$mean <- for_plotting_merged$X2
data_plot <- data.frame(
"F0_P" = data_f0_b6[gene, ],
"F0_M" = data_f0_cast[gene, ],
"F1_P" = data_f1_b6[gene, ],
"F1_M" = data_f1_cast[gene, ]
)
norm_factors <- c(sum(colSums(data_f0_b6)),
sum(colSums(data_f0_cast)))
norm_factors <- norm_factors / norm_factors[[1]]
data_plot[,1:2] <- data.frame(t(t(data_plot[,1:2]) / norm_factors))
data_plot$Interval <- 1:nrow(data_plot)
for_plotting_merged$Sample <- ifelse(for_plotting_merged$Sample == 1, "F0", "F1")
ggplot(for_plotting_merged, aes(X1, y = rev_logit(X2), col = Sample)) +
geom_line(linetype = "dashed", size = 1.5) +
scale_color_manual(values = c("F0" = "black", "F1" = "darkgrey")) +
# geom_ribbon(aes(ymin = rev_logit(error_lower), ymax = rev_logit(error_upper), fill = Sample),
#             alpha = 0.2) +
theme(legend.position="top") +
geom_point(data = data_plot, aes(Interval, (F0_P) / (F0_M + F0_P)), col = "black", size = 2) +
geom_point(data = data_plot, aes(Interval, (F1_P) / (F1_M + F1_P)), col = "darkgrey", size = 2) +
xlim(0, 100) + scale_fill_manual(values = c("red", "darkgrey")) + ylim(c(0, 1)) + xlab("Pseudotime") +
ylab("Allelic Imbalance") + theme_classic() + ggtitle(gene) +
geom_hline(yintercept = 0.5, linetype = "dashed") +
theme(text = element_text(size = 30), legend.position = "None") +
scale_x_continuous(breaks = c(0, 50, 100)) +
scale_y_continuous(breaks = c(0, 0.5, 1), limits = c(0, 1))
}
plot_cis_trans_gene_mean("Dnajc2")
plot_cis_trans_gene_mean("Pr1")
plot_cis_trans_gene_mean("Prm1")
plot_cis_trans_gene_mean("Tex21")
setwd("~/Desktop/Projects/ASE_Spermatogenesis_Paper_rerun_Revisions/Scripts/Demonstrations/")
library(ggplot2)
library(tidyverse)
library(viridis)
source("./functions.R")
setwd("~/Desktop/Projects/ASE_Spermatogenesis_Paper_rerun_Revisions/Scripts/Demonstrations/")
library(ggplot2)
library(tidyverse)
library(viridis)
source("./functions.R")
allelic_ratios <- readRDS("./test_ratios_trans.rds")
total_exp <- readRDS("./test_counts_trans.rds")
rm(list = ls())
allelic_ratios <- readRDS("./test_ratios_trans.rds")
total_exp <- readRDS("./test_counts_trans.rds")
reticulate::repl_python()
run_coreg_gp <- function(gene, model = "full"){
rs_f0_noStab <- allelic_ratios[[1]]
rs_f1_noStab <- allelic_ratios[[2]]
data_plot_ratio <- data.frame(
FC_F0 = rs_f0_noStab[gene, ],
FC_F1 = rs_f1_noStab[gene, ],
Interval = 1:ncol(rs_f0_noStab)
)
# get intervals in which gene is expressed
intervals_test <- total_exp[gene, ] > 0.5
print(table(intervals_test))
if (sum(intervals_test) < 5){
print("Not enough intervals to test")
return(list(NA, NA, NA, NA))
}
data_plot_ratio <- data_plot_ratio[intervals_test, ]
x_test <- as.double(data_plot_ratio$Interval)
y1_test <- logit(data_plot_ratio$FC_F0)
y2_test <- logit(data_plot_ratio$FC_F1)
X_augmented = as.matrix(data.frame(c(x_test, x_test), c(rep(0, length(x_test)), rep(1, length(x_test)))))
Y_augmented = as.matrix(data.frame(c(y1_test, y2_test), c(rep(0, length(x_test)), rep(1, length(x_test)))))
not_exclude <- !is.infinite(Y_augmented[,1])
if(sum(!not_exclude) / length(not_exclude) > 0.1){
print("Warning: More than 10% of values are NA")
}
X_augmented_run <- X_augmented[not_exclude, ]
Y_augmented_run <- Y_augmented[not_exclude, ]
tryCatch({
gp_res_parent_constant = py$fit_vanilla_4(X_augmented_run, Y_augmented_run, model = "conserved")
gp_res_parent_cis_static = py$fit_vanilla_4(X_augmented_run, Y_augmented_run, model = "cis_static")
gp_res_parent_cis_dynamic = py$fit_vanilla_4(X_augmented_run, Y_augmented_run, model = "cis_dynamic")
gp_res_parent_trans_static = py$fit_vanilla_4(X_augmented_run, Y_augmented_run, model = "trans_static")
gp_res_parent_trans_dynamic = py$fit_vanilla_4(X_augmented_run, Y_augmented_run, model = "trans_dynamic")
return(list(gp_res_parent_constant, gp_res_parent_cis_static, gp_res_parent_cis_dynamic, gp_res_parent_trans_static,
gp_res_parent_trans_dynamic))
}, error=function(cond) {
return(NA)
})
}
gp_results <- lapply(rownames(total_exp), run_coreg_gp)
names(gp_results) <- rownames(total_exp)
run_coreg_gp <- function(gene, model = "full"){
logit <- function(x) {log(x / (1 - x))}
rs_f0_noStab <- allelic_ratios[[1]]
rs_f1_noStab <- allelic_ratios[[2]]
data_plot_ratio <- data.frame(
FC_F0 = rs_f0_noStab[gene, ],
FC_F1 = rs_f1_noStab[gene, ],
Interval = 1:ncol(rs_f0_noStab)
)
# get intervals in which gene is expressed
intervals_test <- total_exp[gene, ] > 0.5
print(table(intervals_test))
if (sum(intervals_test) < 5){
print("Not enough intervals to test")
return(list(NA, NA, NA, NA))
}
data_plot_ratio <- data_plot_ratio[intervals_test, ]
x_test <- as.double(data_plot_ratio$Interval)
y1_test <- logit(data_plot_ratio$FC_F0)
y2_test <- logit(data_plot_ratio$FC_F1)
X_augmented = as.matrix(data.frame(c(x_test, x_test), c(rep(0, length(x_test)), rep(1, length(x_test)))))
Y_augmented = as.matrix(data.frame(c(y1_test, y2_test), c(rep(0, length(x_test)), rep(1, length(x_test)))))
not_exclude <- !is.infinite(Y_augmented[,1])
if(sum(!not_exclude) / length(not_exclude) > 0.1){
print("Warning: More than 10% of values are NA")
}
X_augmented_run <- X_augmented[not_exclude, ]
Y_augmented_run <- Y_augmented[not_exclude, ]
tryCatch({
gp_res_parent_constant = py$fit_vanilla_4(X_augmented_run, Y_augmented_run, model = "conserved")
gp_res_parent_cis_static = py$fit_vanilla_4(X_augmented_run, Y_augmented_run, model = "cis_static")
gp_res_parent_cis_dynamic = py$fit_vanilla_4(X_augmented_run, Y_augmented_run, model = "cis_dynamic")
gp_res_parent_trans_static = py$fit_vanilla_4(X_augmented_run, Y_augmented_run, model = "trans_static")
gp_res_parent_trans_dynamic = py$fit_vanilla_4(X_augmented_run, Y_augmented_run, model = "trans_dynamic")
return(list(gp_res_parent_constant, gp_res_parent_cis_static, gp_res_parent_cis_dynamic, gp_res_parent_trans_static,
gp_res_parent_trans_dynamic))
}, error=function(cond) {
return(NA)
})
}
gp_results <- lapply(rownames(total_exp), run_coreg_gp)
names(gp_results) <- rownames(total_exp)
plot_cis_trans_gene_mean("Tex21")
plot_cis_trans_gene_mean <- function(gene){
asd <- gp_results[[gene]]
for_plotting <- lapply(1:length(asd[[5]][[2]]), function(i){
xx = asd[[5]][[2]][[i]]
xx = data.frame(do.call("cbind", xx))
xx$Sample = i
xx$X3 <- sqrt(xx$X3)
xx})
for_plotting_merged <- do.call("rbind", for_plotting)
for_plotting_merged$Sample <- as.factor(for_plotting_merged$Sample)
for_plotting_merged$mean <- for_plotting_merged$X2
data_plot <- data.frame(
"F0_P" = data_f0_b6[gene, ],
"F0_M" = data_f0_cast[gene, ],
"F1_P" = data_f1_b6[gene, ],
"F1_M" = data_f1_cast[gene, ]
)
norm_factors <- c(sum(colSums(data_f0_b6)),
sum(colSums(data_f0_cast)))
norm_factors <- norm_factors / norm_factors[[1]]
data_plot[,1:2] <- data.frame(t(t(data_plot[,1:2]) / norm_factors))
data_plot$Interval <- 1:nrow(data_plot)
for_plotting_merged$Sample <- ifelse(for_plotting_merged$Sample == 1, "F0", "F1")
ggplot(for_plotting_merged, aes(X1, y = rev_logit(X2), col = Sample)) +
geom_line(linetype = "dashed", size = 1.5) +
scale_color_manual(values = c("F0" = "black", "F1" = "darkgrey")) +
# geom_ribbon(aes(ymin = rev_logit(error_lower), ymax = rev_logit(error_upper), fill = Sample),
#             alpha = 0.2) +
theme(legend.position="top") +
geom_point(data = data_plot, aes(Interval, (F0_P) / (F0_M + F0_P)), col = "black", size = 2) +
geom_point(data = data_plot, aes(Interval, (F1_P) / (F1_M + F1_P)), col = "darkgrey", size = 2) +
xlim(0, 100) + scale_fill_manual(values = c("red", "darkgrey")) + ylim(c(0, 1)) + xlab("Pseudotime") +
ylab("Allelic Imbalance") + theme_classic() + ggtitle(gene) +
geom_hline(yintercept = 0.5, linetype = "dashed") +
theme(text = element_text(size = 30), legend.position = "None") +
scale_x_continuous(breaks = c(0, 50, 100)) +
scale_y_continuous(breaks = c(0, 0.5, 1), limits = c(0, 1))
}
plot_cis_trans_gene_mean("Tex21")
# # Not run -- subset data on genes to show
# ratios_all_genes <- readRDS("./normalized_ratios_trans.rds")
# saveRDS(lapply(ratios_all_genes, function(x){x[c("Dnajc2", "Ddt", "Tex21"), ]}), "./test_ratios_trans.rds")
# total_exp <- readRDS("../../Data/processed/total_exp.rds")
# total_exp <- total_exp[c("Dnajc2", "Ddt", "Tex21"), ]
# saveRDS(total_exp, "./test_counts_trans.rds")
list_data <- readRDS("./Data/processed//binned_data.rds")
saveRDS(lapply(list_data, function(x){x[c("Dnajc2", "Ddt", "Tex21"), ]}))
# # Not run -- subset data on genes to show
# ratios_all_genes <- readRDS("./normalized_ratios_trans.rds")
# saveRDS(lapply(ratios_all_genes, function(x){x[c("Dnajc2", "Ddt", "Tex21"), ]}), "./test_ratios_trans.rds")
# total_exp <- readRDS("../../Data/processed/total_exp.rds")
# total_exp <- total_exp[c("Dnajc2", "Ddt", "Tex21"), ]
# saveRDS(total_exp, "./test_counts_trans.rds")
list_data <- readRDS("../../Data/processed//binned_data.rds")
saveRDS(lapply(list_data, function(x){x[c("Dnajc2", "Ddt", "Tex21"), ]}), "./test_counts_trans_per_sample.rds")
list_data <- readRDS("./test_counts_trans_per_sample.rds")
data_f0_b6 <- list_data[[1]]
data_f0_cast <- list_data[[2]]
data_f1_b6 <- list_data[[3]]
data_f1_cast <- list_data[[4]]
plot_cis_trans_gene_mean <- function(gene){
asd <- gp_results[[gene]]
for_plotting <- lapply(1:length(asd[[5]][[2]]), function(i){
xx = asd[[5]][[2]][[i]]
xx = data.frame(do.call("cbind", xx))
xx$Sample = i
xx$X3 <- sqrt(xx$X3)
xx})
for_plotting_merged <- do.call("rbind", for_plotting)
for_plotting_merged$Sample <- as.factor(for_plotting_merged$Sample)
for_plotting_merged$mean <- for_plotting_merged$X2
data_plot <- data.frame(
"F0_P" = data_f0_b6[gene, ],
"F0_M" = data_f0_cast[gene, ],
"F1_P" = data_f1_b6[gene, ],
"F1_M" = data_f1_cast[gene, ]
)
norm_factors <- c(sum(colSums(data_f0_b6)),
sum(colSums(data_f0_cast)))
norm_factors <- norm_factors / norm_factors[[1]]
data_plot[,1:2] <- data.frame(t(t(data_plot[,1:2]) / norm_factors))
data_plot$Interval <- 1:nrow(data_plot)
for_plotting_merged$Sample <- ifelse(for_plotting_merged$Sample == 1, "F0", "F1")
ggplot(for_plotting_merged, aes(X1, y = rev_logit(X2), col = Sample)) +
geom_line(linetype = "dashed", size = 1.5) +
scale_color_manual(values = c("F0" = "black", "F1" = "darkgrey")) +
# geom_ribbon(aes(ymin = rev_logit(error_lower), ymax = rev_logit(error_upper), fill = Sample),
#             alpha = 0.2) +
theme(legend.position="top") +
geom_point(data = data_plot, aes(Interval, (F0_P) / (F0_M + F0_P)), col = "black", size = 2) +
geom_point(data = data_plot, aes(Interval, (F1_P) / (F1_M + F1_P)), col = "darkgrey", size = 2) +
xlim(0, 100) + scale_fill_manual(values = c("red", "darkgrey")) + ylim(c(0, 1)) + xlab("Pseudotime") +
ylab("Allelic Imbalance") + theme_classic() + ggtitle(gene) +
geom_hline(yintercept = 0.5, linetype = "dashed") +
theme(text = element_text(size = 30), legend.position = "None") +
scale_x_continuous(breaks = c(0, 50, 100)) +
scale_y_continuous(breaks = c(0, 0.5, 1), limits = c(0, 1))
}
plot_cis_trans_gene_mean("Tex21")
plot_cis_trans_gene_mean <- function(gene){
rev_logit <- function(x){
1 / (1 + exp(-x))
}
asd <- gp_results[[gene]]
for_plotting <- lapply(1:length(asd[[5]][[2]]), function(i){
xx = asd[[5]][[2]][[i]]
xx = data.frame(do.call("cbind", xx))
xx$Sample = i
xx$X3 <- sqrt(xx$X3)
xx})
for_plotting_merged <- do.call("rbind", for_plotting)
for_plotting_merged$Sample <- as.factor(for_plotting_merged$Sample)
for_plotting_merged$mean <- for_plotting_merged$X2
data_plot <- data.frame(
"F0_P" = data_f0_b6[gene, ],
"F0_M" = data_f0_cast[gene, ],
"F1_P" = data_f1_b6[gene, ],
"F1_M" = data_f1_cast[gene, ]
)
norm_factors <- c(sum(colSums(data_f0_b6)),
sum(colSums(data_f0_cast)))
norm_factors <- norm_factors / norm_factors[[1]]
data_plot[,1:2] <- data.frame(t(t(data_plot[,1:2]) / norm_factors))
data_plot$Interval <- 1:nrow(data_plot)
for_plotting_merged$Sample <- ifelse(for_plotting_merged$Sample == 1, "F0", "F1")
ggplot(for_plotting_merged, aes(X1, y = rev_logit(X2), col = Sample)) +
geom_line(linetype = "dashed", size = 1.5) +
scale_color_manual(values = c("F0" = "black", "F1" = "darkgrey")) +
# geom_ribbon(aes(ymin = rev_logit(error_lower), ymax = rev_logit(error_upper), fill = Sample),
#             alpha = 0.2) +
theme(legend.position="top") +
geom_point(data = data_plot, aes(Interval, (F0_P) / (F0_M + F0_P)), col = "black", size = 2) +
geom_point(data = data_plot, aes(Interval, (F1_P) / (F1_M + F1_P)), col = "darkgrey", size = 2) +
xlim(0, 100) + scale_fill_manual(values = c("red", "darkgrey")) + ylim(c(0, 1)) + xlab("Pseudotime") +
ylab("Allelic Imbalance") + theme_classic() + ggtitle(gene) +
geom_hline(yintercept = 0.5, linetype = "dashed") +
theme(text = element_text(size = 30), legend.position = "None") +
scale_x_continuous(breaks = c(0, 50, 100)) +
scale_y_continuous(breaks = c(0, 0.5, 1), limits = c(0, 1))
}
plot_cis_trans_gene_mean("Tex21")
plot_cis_trans_gene_mean("Dnajc2")
gp_results
gp_results$Dnajc2
setwd("~/Desktop/Projects/ASE_Spermatogenesis_Paper_rerun_Revisions/Scripts/Demonstrations/")
library(ggplot2)
library(tidyverse)
library(viridis)
source("./functions.R")
# # Not run -- subset data on genes to show
# ratios_all_genes <- readRDS("./normalized_ratios_trans.rds")
# saveRDS(lapply(ratios_all_genes, function(x){x[c("Dnajc2", "Ddt", "Tex21"), ]}), "./test_ratios_trans.rds")
# total_exp <- readRDS("../../Data/processed/total_exp.rds")
# total_exp <- total_exp[c("Dnajc2", "Ddt", "Tex21"), ]
# saveRDS(total_exp, "./test_counts_trans.rds")
# list_data <- readRDS("../../Data/processed//binned_data.rds")
# saveRDS(lapply(list_data, function(x){x[c("Dnajc2", "Ddt", "Tex21"), ]}), "./test_counts_trans_per_sample.rds")
allelic_ratios <- readRDS("./test_ratios_trans.rds")
total_exp <- readRDS("./test_counts_trans.rds")
list_data <- readRDS("./test_counts_trans_per_sample.rds")
data_f0_b6 <- list_data[[1]]
data_f0_cast <- list_data[[2]]
data_f1_b6 <- list_data[[3]]
data_f1_cast <- list_data[[4]]
reticulate::repl_python()

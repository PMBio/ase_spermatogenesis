# reduced plots
plot_df_1 <- importance_df_cis %>% add_column(Effect = "General") %>%
mutate(Feature = gsub("^VAR_", "", Feature)) %>%
mutate(Feature = gsub("^evolution_|^structural_|^REGULATION_", "", Feature)) %>%
arrange(MeanDecreaseAccuracy) %>% mutate(Feature = factor(Feature, levels = reorder(Feature, MeanDecreaseAccuracy)))
plot_df_2 <- importance_df_cis_dynamic %>%
mutate(Feature = gsub("^VAR_", "", Feature)) %>%
mutate(Feature = gsub("^evolution_|^structural_|^REGULATION_", "", Feature)) %>%
add_column(Effect = "Dynamic")
features_show <- setNames(importance_df_cis$MeanDecreaseAccuracy + importance_df_cis_dynamic[rownames(importance_df_cis), ]$MeanDecreaseAccuracy,
rownames(importance_df_cis))
features_show <- names(sort(features_show, decreasing = T)[1:12])
convert_names <- setNames(c("Exp. Level", "PhastCons (exon)", "PhyloP (exon)", "%SNP (exon)", "3' UTR length", "%SNP 3' UTR", "#Exons",
"Exp. Variability (inter-celltype)", "Exp. Variability (intra-celltype)", "5' UTR length", "%SNP (5' UTR)", "Gene Length"),
features_show)
plot_df_1 <- plot_df_1[features_show, ]
plot_df_2 <- plot_df_2[features_show, ]
plot_df_1$order <- 13 - 1:nrow(plot_df_1)
plot_df_2$order <- 13 - 1:nrow(plot_df_2)
plot_df_1$FeaturePretty <- convert_names[rownames(plot_df_1)]
plot_df_2$FeaturePretty <- convert_names[rownames(plot_df_2)]
features_highlight <- c("VAR_evolution_phastcons_exon", "VAR_expression_level", "VAR_evolution_snpdensity_F1_exon")
features_highlight_index <- plot_df_1[features_highlight, ]$order
rbind(plot_df_1, plot_df_2) %>%
ggplot(aes(reorder(FeaturePretty, order),  MeanDecreaseAccuracy, col = Effect)) +
geom_point(size = 7) + coord_flip() + ylim(-0.001, 0.015) +
ggtitle("Predictors of Cis effects") +
theme_classic() +
xlab("") +
theme(text = element_text(size=30)) +
scale_color_manual(values = c("red", "darkgrey")) +
ylab("Feature Importance") + theme(legend.position = "None") +
scale_y_continuous(expand = c(0, 0)) +
annotate(x  = 2, y = 0.010, geom = "text", label = paste0("Cis (gen) AUC: ", round(all_ucs_test_means[1, ]$value, digits = 3)), size = 10, col = "grey40") +
annotate(x  = 1, y = 0.010, geom = "text", label = paste0("Cis (gen) AUC: ", round(all_ucs_test_means[1, ]$value, digits = 3)), size = 10, col = "red") +
annotate(geom = "rect", xmin = features_highlight_index[[1]] + 0.4, xmax = features_highlight_index[[1]] - 0.4, ymin = 0, ymax = 0.015,
col = "black", fill = "yellow", alpha = 0.1) +
annotate(geom = "rect", xmin = features_highlight_index[[2]] + 0.4, xmax = features_highlight_index[[2]] - 0.4, ymin = 0, ymax = 0.015,
col = "black", fill = "yellow", alpha = 0.1) +
annotate(geom = "rect", xmin = features_highlight_index[[3]] + 0.4, xmax = features_highlight_index[[3]] - 0.4, ymin = 0, ymax = 0.015,
col = "black", fill = "yellow", alpha = 0.1)
plot_df_1 <- importance_df_trans %>% add_column(Effect = "General") %>%
mutate(Feature = gsub("^VAR_", "", Feature)) %>%
mutate(Feature = gsub("^evolution_|^structural_|^REGULATION_", "", Feature)) %>%
arrange(MeanDecreaseAccuracy) %>% mutate(Feature = factor(Feature, levels = reorder(Feature, MeanDecreaseAccuracy)))
plot_df_2 <- importance_df_trans_dynamic %>%
mutate(Feature = gsub("^VAR_", "", Feature)) %>%
mutate(Feature = gsub("^evolution_|^structural_|^REGULATION_", "", Feature)) %>%
add_column(Effect = "Dynamic")
rbind(plot_df_1, plot_df_2) %>%
ggplot(aes(Feature, MeanDecreaseAccuracy, col = Effect)) +
geom_point(size = 3) + coord_flip() + ylim(-0.001, 0.015) +
geom_hline(yintercept = 0, linetype = "dashed") +
ggtitle("Predictors of Trans effects") +
theme_classic() +
xlab("") +
theme(text = element_text(size=30)) +
scale_color_manual(values = c("darkred", "darkgrey"))
data_fit <- readRDS("~/Desktop/rforest_analysis_files/all_features.rds")
data_fit[is.na(data_fit)] <- 0
data_fit <- data.frame(scale(data_fit))
features_show <- c("VAR_evolution_phastcons_exon", "VAR_expression_level", "VAR_evolution_snpdensity_F1_exon")
all_genes <- setNames(rep("None", nrow(data_fit)), rownames(data_fit))
all_genes[genes_cis] <- "cis"
all_genes[genes_cis_dynamic] <- "dynamic cis"
all_genes <- factor(all_genes, levels = c("None", "cis", "dynamic cis"))
df_plot <-
data_fit[,features_show] %>%
data.frame() %>%
add_column(effect = all_genes) %>%
pivot_longer(-effect) %>%
mutate(name = convert_names[as.character(name)]) %>%
mutate(name = factor(name, levels = c("Exp. Level", "PhastCons (exon)", "%SNP (exon)"))) %>%
mutate(effect = factor(effect, levels = c("dynamic cis", "cis", "None")))
df_plot %>%
ggplot(aes(x = effect, y = value)) +
geom_violin(fill = "grey") +
stat_summary(size = 1) +
# geom_boxplot(width = 0.1) +
facet_wrap(~name, scales = "free", nrow = 3) +
coord_flip() +
ggpubr::stat_compare_means(comparisons = list(c("None", "cis"), c("None", "dynamic cis"), c("cis", "dynamic cis")),
label = "p.signif", coord.flip = TRUE, size = 10) +
theme_classic() +
theme(text = element_text(size = 50)) +
xlab("") + ylab("")
pheatmap::pheatmap(ase_smoothed[rownames(clustering_df[order(clustering_df$Cluster_ASE), ]), ],
cluster_cols = F, cluster_rows = F, show_rownames = F, show_colnames = F,
annotation_row = clustering_df,
scale = 'row',
gaps_row = cumsum(table(clustering_df$Cluster_ASE)),
color = colfunc(10))
clustering_df
clustering_df$Cluster_ASE
table(clustering_df$Cluster_ASE)
table(clustering_df$Cluster_ASE)[c(1, 2)]
sum(table(clustering_df$Cluster_ASE)[c(1, 2)])
sum(table(clustering_df$Cluster_ASE)[c(1, 2)]) / sum(table(clustering_df$Cluster_ASE))
apply(expression_smoothed_cut, 1, function(x){diff(x, lag = 5)})
t(apply(expression_smoothed_cut, 1, function(x){diff(x, lag = 5)}))
plot(t(apply(expression_smoothed_cut, 1, function(x){diff(x, lag = 5)}))[1, ])
plot(t(apply(expression_smoothed_cut, 2, function(x){diff(x, lag = 5)}))[1, ])
plot(t(apply(expression_smoothed_cut, 1, function(x){diff(x, lag = 5)}))[2, ])
plot(t(apply(expression_smoothed_cut, 1, function(x){diff(x, lag = 5)}))[3, ])
plot(t(apply(expression_smoothed_cut, 1, function(x){diff(x, lag = 5)}))[4, ])
plot(t(apply(expression_smoothed_cut, 1, function(x){diff(x, lag = 5)}))[5, ])
plot(t(apply(expression_smoothed_cut, 1, function(x){diff(x, lag = 5)}))[6, ])
plot(t(apply(expression_smoothed_cut, 1, function(x){diff(x, lag = 5)}))[7, ])
plot(abs(t(apply(expression_smoothed_cut, 1, function(x){diff(x, lag = 5)}))[7, ]))
plot(abs(t(apply(expression_smoothed_cut, 1, function(x){diff(x, lag = 5)}))[1, ]))
deriv_matrix <-apply(expression_smoothed_cut, 1, function(x){diff(x, lag = 5)}))
deriv_matrix
deriv_matrix <- apply(expression_smoothed_cut, 1, function(x){diff(x, lag = 5)})
deriv_matrix
deriv_matrix <- t(apply(expression_smoothed_cut, 1, function(x){diff(x, lag = 5)}))
deriv_matrix
deriv_matrix[1, ]
colMeans(abs(deriv_matrix))
plot(colMeans(abs(deriv_matrix)))
deriv_matrix[1, ]
plot(deriv_matrix[1, ])
pheatmap(deriv_matrix)
pheatmap(deriv_matrix, cluster_rows = F, cluster_cols = F)
pheatmap(deriv_matrix, cluster_rows = F, cluster_cols = F, scale = "row")
deriv_matrix <- t(apply(ase_smoothed_cut, 1, function(x){diff(x, lag = 5)}))
deriv_matrix <- t(apply(ase_smoothed, 1, function(x){diff(x, lag = 5)}))
deriv_matrix
colMeans(deriv_matrix)
plot(colMeans(deriv_matrix))
plot(colMeans(abs(deriv_matrix)))
# cluster1
high_hits_cluster <- summary_data_meanTest[rownames(clustering_df[clustering_df$Cluster_ASE == 1, ]), ]
deriv_matrix <- abs(t(apply(ase_smoothed, 1, function(x){diff(x, lag = 5)})))
deriv_matrix
pheatmap(deriv_matrix, cluster_rows = F, cluster_cols = F)
pheatmap(deriv_matrix, cluster_rows = F, cluster_cols = F, scale = "row")
pheatmap(deriv_matrix, cluster_rows = T, cluster_cols = F, scale = "row")
45 - 17
56
60
data_total_expression
rowData()
rowData(data_total_expression)
colData(data_total_expression)
knitr::opts_chunk$set(echo = TRUE)
run_tsne <- function(sce, use_batch_corrected = T){
if (use_batch_corrected){
per.hand.pca <- prcomp(metadata(sce)$corrected[colnames(sce), ])
pca.df <- data.frame(per.hand.pca$x)
tsne.data <- Rtsne::Rtsne(per.hand.pca$x[,1:20])
reducedDims(sce)$PCA <- pca.df[,1:50]
reducedDims(sce)$TSNE <- tsne.data$Y
sce
}
else {
sce <- computeSumFactors(sce)
sce <- logNormCounts(sce)
gene_var_model <- modelGeneVar(sce)
hvgs <- getTopHVGs(gene_var_model, n = 1000)
rowData(sce) <- cbind(rowData(sce), gene_var_model)
per.hand.pca <- prcomp(t(logcounts(sce[hvgs,])))
pca.df <- data.frame(per.hand.pca$x)
tsne.data <- Rtsne::Rtsne(per.hand.pca$x[,1:20])
reducedDims(sce)$PCA <- pca.df[,1:50]
reducedDims(sce)$TSNE <- tsne.data$Y
sce
}
}
run_clustering <- function(sce, column_name = "Cluster"){
set.seed(123)
clusters <- quickCluster(sce, method = "igraph",
use.ranks=FALSE, min.size = 3)
colData(sce)[,column_name] <- clusters
sce
}
theme_tsne <- function(){
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
panel.background=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_line(color = "grey"),
plot.background=element_blank(),
text = element_text(size = 20))
}
theme_paper <- function(){
theme(panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
text = element_text(size = 20))
}
colors_celltypes <- c(
"Dendritic cells" = "#E64B35FF",
"Macrophages" = "#e64b98",
"Immature B-cell" = "#4DBBD5FF",
"Mature B-cell" = "#00A087FF",
"Neutrophil" = "#ecd17f",
"Neutrophil 2" = "#F39B7FFF",
"Small pre B-cell" = "#8491B4FF",
"NK-cell" = "#bd754a",
"Plasma B-cells?" = "#91D1C2FF",
"T-cell" = "#7E6148FF",
"T-cell_aged" = "#B09C85FF",
"Unassigned" = "grey20",
"Doublet" = "grey40",
"Erythrocyte" = "grey60"
)
sample_name_conversion <- c(
"ILSE_23028_Sample2" = "Young1",
"ILSE_23364_Sample1" = "Young2",
"ILSE_23364_Sample3" = "Old2"
)
sample_color = c(
"Young1" = "grey20",
"Young2" = "grey60",
"Old2" = "lightblue"
)
source("~/Desktop/PhD/RCode/Multipurpose/auxiliary.R")
sce.all <- readRDS("~/Projects/XChromosome_Project/ProcessedData/Merged_processed.data.final.rds")
sce.all <- sce.all[,!sce.all$CellType_manual %in% c("Erythrocyte", "Dendritic cell", "Doublets", "Rb-high", "Outlier")]
sce.all <- sce.all[,!grepl("outlier", sce.all$CellType_manual)]
rowData(sce.all)$chromosome_name <- annotate_chromosome_new(rownames(sce.all))$chromosome_name
samples.exclude <- names( table(sce.all$Sample)[table(sce.all$Sample) < 500] )
sce.all <- sce.all[,!sce.all$Sample %in% samples.exclude]
metadata(sce.all)$corrected <- metadata(sce.all)$corrected[colnames(sce.all), ]
sce.all.x <- sce.all[rowData(sce.all)$chromosome_name == "X", ]
sce.all.y <- sce.all[rowData(sce.all)$chromosome_name == "Y", ]
total_x <- colSums(counts(sce.all.x))
total_y <- colSums(counts(sce.all.y))
per_library_x <- data.frame(
Sample = sce.all.x$Sample,
exp = total_x
) %>% group_by(Sample) %>%
summarize(exp = sum(exp))
per_library_y <- data.frame(
Sample = sce.all.y$Sample,
exp = total_y
) %>% group_by(Sample) %>%
summarize(exp = sum(exp))
ggplot(data.frame(exp_x = per_library_x$exp + 1, exp_y = per_library_y$exp + 1), aes(exp_x, exp_y)) + geom_point() + scale_x_log10() + scale_y_log10()
library(irlba)
set.seed(1234)
pca <- prcomp_irlba(metadata(sce.all)$corrected, n = 50)
umap <- umap::umap(pca$x)
reducedDims(sce.all)$PCA <- pca$x
reducedDims(sce.all)$UMAP <- umap$layout
deriv_matrix
apply(deriv_matrix, function(x){which(x > quantile(x, 0.8))})
apply(deriv_matrix, 1, function(x){which(x > quantile(x, 0.8))})
apply(deriv_matrix, 1, function(x){(x > quantile(x, 0.8))})
apply(deriv_matrix, 1, function(x){as.numeric(x > quantile(x, 0.8))})
dim(apply(deriv_matrix, 1, function(x){as.numeric(x > quantile(x, 0.8))}))
t(apply(deriv_matrix, 1, function(x){as.numeric(x > quantile(x, 0.8))}))
colSums(t(apply(deriv_matrix, 1, function(x){as.numeric(x > quantile(x, 0.8))})))
plot(colSums(t(apply(deriv_matrix, 1, function(x){as.numeric(x > quantile(x, 0.8))}))))
deriv_matrix <- abs(t(apply(ase_smoothed, 1, function(x){diff(x, lag = 5)})))
plot(colSums(t(apply(deriv_matrix, 1, function(x){as.numeric(x > quantile(x, 0.8))}))))
plot(colSums(t(apply(deriv_matrix, 1, function(x){as.numeric(x > quantile(x, 0.9))}))))
plot(colSums(t(apply(deriv_matrix, 1, function(x){as.numeric(x > quantile(x, 0.5))}))))
plot(colSums(t(apply(deriv_matrix, 1, function(x){as.numeric(x > quantile(x, 0.7))}))))
colMeans(deriv_matrix)
plot(colMeans(deriv_matrix))
colMeans(abs(ase_smoothed - 0.5))
plot(colMeans(abs(ase_smoothed - 0.5)))
ase_smoothed
pheatmap(ase_smoothed)
pheatmap(ase_smoothed, cluster_rows = F, cluster_cols = F)
pheatmap(ase_smoothed, cluster_rows = T, cluster_cols = F)
pheatmap(abs(ase_smoothed_unscaled), cluster_rows = T, cluster_cols = F)
pheatmap(abs(ase_smoothed_unscaled - 0.5), cluster_rows = T, cluster_cols = F)
colMeans(abs(ase_smoothed_unscaled - 0.5))
plot(colMeans(abs(ase_smoothed_unscaled - 0.5)))
deriv_matrix <- t(apply(abs(ase_smoothed_unscaled - 0.5), 1, function(x){diff(x, lag = 5)}))
deriv_matrix
pheatmap(deriv_matrix, cluster_cols = F)
colMeans(deriv_matrix)
plot(colMeans(deriv_matrix))
deriv_matrix <- t(apply(t(scale(t(abs(ase_smoothed_unscaled - 0.5)))), 1, function(x){diff(x, lag = 5)}))
plot(colMeans(deriv_matrix))
deriv_matrix <- t(apply(t(scale(t(abs(ase_smoothed_unscaled - 0.5)))), 1, function(x){diff(x, lag = 3)}))
colMeans(deriv_matrix)
plot(colMeans(deriv_matrix))
deriv_matrix <- abs(t(apply(t(scale(t(abs(ase_smoothed_unscaled - 0.5)))), 1, function(x){diff(x, lag = 3)})))
deriv_matrix
colMeans(deriv_matrix)
plot(colMeans(deriv_matrix))
rm(list = ls())
# Analysis TAP-Seq data
library(DropletUtils)
library(scran)
library(reshape2)
library(scater)
library(ggplot2)
library(Rtsne)
library(irlba)
library(RColorBrewer)
library(viridis)
library(pheatmap)
library(tidyverse)
source("~/Desktop/PhD/RCode/Multipurpose/auxiliary.R")
source("~/Desktop/Projects/XChromosome_Project/Scripts/functions.R")
theme_paper <- function(){
theme(panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
text = element_text(size = 10))
}
# Read in datasets (raw matrices!)
dataset_names <- list.files("~/Desktop/Projects/XChromosome_Project/Data/ILSE_24346/collected_output/", include.dirs = T, pattern = "raw_feature_bc")
dataset_names <- dataset_names[c(1, 3, 4, 5, 6, 7, 8, 9, 10, 2)]
samples <- lapply(dataset_names, function(x){
tt <- read10xCounts(paste0("~/Desktop/Projects/XChromosome_Project/Data/ILSE_24346/collected_output/", x))
rownames(tt) = rowData(tt)$Symbol
tt
})
# stats wrt % aligning to genome, % aligning to transcriptome
metrics_summary_names <- list.files("~/Desktop/Projects/XChromosome_Project/Data/ILSE_24346/collected_output/", include.dirs = T, pattern = "metrics_summary")
metrics_summary_names <- metrics_summary_names[c(1, 3, 4, 5, 6, 7, 8, 9, 10, 2)]
percent_aligning <- do.call("rbind", lapply(metrics_summary_names, function(x){
dd <- read_csv(paste0("~/Desktop/Projects/XChromosome_Project/Data/ILSE_24346/collected_output/", x))
dd <- apply(dd, 2, function(x){as.numeric(gsub("%", "", x))})
return(dd)
})) %>% data.frame()
metadata <- readxl::read_excel("~/Desktop/Projects/XChromosome_Project/Data/ILSE_24346/ILSE_24346_TAP_SDP_metadata.xlsx")
metadata$TSO <- c(rep(F, 4), rep(T, 6))
metadata$input_volume <- c(35, rep(11, 9))
metadata$amp_cDNA <- c(rep(7, F), rep(3, T))
metadata$panel <- c(rep(c("X+HK", "X", "HK"), 3), "X+HK")
full_statistics <- cbind(percent_aligning, metadata)
full_statistics %>%
ggplot(aes(Conditions, Number.of.Reads)) + geom_bar(stat = "identity") +
coord_flip() + theme_paper() + ggtitle("Number of reads sequenced")
full_statistics %>%
ggplot(aes(Conditions, Estimated.Number.of.Cells * Median.UMI.Counts.per.Cell)) + geom_bar(stat = "identity") +
coord_flip() + theme_paper() + ggtitle("Number of UMIs sequenced") + ylab("Number of UMIs")
full_statistics %>%
ggplot(aes(Conditions, Estimated.Number.of.Cells * Median.UMI.Counts.per.Cell / Number.of.Reads * 100)) + geom_bar(stat = "identity") +
coord_flip() + theme_paper() + ggtitle("Number of UMIs sequenced") + ylab("Number of UMIs [% of total reads]")
full_statistics %>%
ggplot(aes(Conditions, Reads.Mapped.Confidently.to.Genome)) + geom_bar(stat = "identity") +
coord_flip() + theme_paper() + ggtitle("% mapping to genome")
full_statistics %>%
ggplot(aes(Conditions, Reads.Mapped.Confidently.to.Intergenic.Regions)) + geom_bar(stat = "identity") +
coord_flip() + theme_paper() + ggtitle("% mapping to intergenic")
full_statistics %>%
ggplot(aes(Conditions, Reads.Mapped.Confidently.to.Intronic.Regions)) + geom_bar(stat = "identity") +
coord_flip() + theme_paper() + ggtitle("% mapping to intronic")
full_statistics %>%
ggplot(aes(Conditions, Reads.Mapped.Confidently.to.Transcriptome)) + geom_bar(stat = "identity") +
coord_flip() + theme_paper() + ggtitle("% mapping to transcriptome")
full_statistics %>%
ggplot(aes(Conditions, Reads.Mapped.Confidently.to.Transcriptome)) + geom_bar(stat = "identity") +
coord_flip() + theme_paper() + ggtitle("% mapping to transcriptome")
# % of reads on target genes, vs 10x
target_genes_hk <- read_csv("~/Desktop/Projects/XChromosome_Project/Data/ILSE_24346/housekeeping.csv")
target_genes_X <- read_csv("~/Desktop/Projects/XChromosome_Project/Data/ILSE_24346/Xgenes.csv")
pseudobulks <- do.call("cbind", lapply(samples, function(x){
rowSums(counts(x))
}))
pseudobulks <- pseudobulks[rowSums(pseudobulks) > 0, ]
write.csv(pseudobulks, "~/Desktop/Projects/XChromosome_Project/ProcessedData/ILSE_24346_TAP_pseudobulks.csv")
full_statistics$reads_total <- colSums(pseudobulks)
full_statistics$reads_on_hk <- colSums(pseudobulks[target_genes_hk$Name, ])
full_statistics$reads_on_X <- colSums(pseudobulks[intersect(target_genes_X$Name, rownames(pseudobulks)), ])
full_statistics %>%
ggplot(aes(Conditions, reads_on_hk / reads_total)) + geom_bar(stat = "identity") +
coord_flip() + theme_paper() + ggtitle("Percent of reads on housekeepers")
full_statistics %>%
ggplot(aes(Conditions, reads_on_X / reads_total)) + geom_bar(stat = "identity") +
coord_flip() + theme_paper() + ggtitle("Percent of reads on X")
full_statistics %>%
ggplot(aes(Conditions, (reads_on_X + reads_on_hk) / reads_total)) + geom_bar(stat = "identity") +
coord_flip() + theme_paper() + ggtitle("Percent of reads on X")
# Can we call cells
# ???
full_statistics %>%
ggplot(aes(Conditions, Estimated.Number.of.Cells)) + geom_bar(stat = "identity") +
coord_flip() + theme_paper() + ggtitle("Number of cells called")
# Look at enrichment and total signal compared to "normal" scRNAseq
sce.all <- readRDS("~/Desktop/Projects/XChromosome_Project/ProcessedData/Merged_processed.data.final.rds")
samples_include <- names(table(sce.all$Sample)[table(sce.all$Sample) > 500])
sce.all <- sce.all[,sce.all$Sample %in% samples_include]
summarized_count_numbers <- lapply(samples_include, function(sample){
sce.here <- sce.all[,sce.all$Sample == sample]
c(
"total" =  sum(counts(sce.here)),
"genes_hk" =  sum(counts(sce.here[target_genes_hk$Name, ])),
"genes_X" =  sum(counts(sce.here[target_genes_X$Name, ]))
)
})
summarized_count_numbers_df <- data.frame(do.call("rbind", summarized_count_numbers))
summarized_count_numbers_df$Sample = samples_include
summarized_count_numbers_df$percent_hk <- summarized_count_numbers_df$genes_hk / summarized_count_numbers_df$total
summarized_count_numbers_df$percent_X <- summarized_count_numbers_df$genes_X / summarized_count_numbers_df$total
# compare
full_statistics$Sample <- full_statistics$Conditions
full_statistics$percent_hk <- full_statistics$reads_on_hk / full_statistics$reads_total
full_statistics$percent_X <- full_statistics$reads_on_X / full_statistics$reads_total
rbind(full_statistics[,c("Sample", "percent_hk", "percent_X")], summarized_count_numbers_df[,c("Sample", "percent_hk", "percent_X")]) %>%
ggplot(aes(x = Sample, y = percent_hk)) + geom_point() + coord_flip() + theme_paper()
rbind(full_statistics[,c("Sample", "percent_hk", "percent_X")], summarized_count_numbers_df[,c("Sample", "percent_hk", "percent_X")]) %>%
ggplot(aes(x = Sample, y = percent_X)) + geom_point() + coord_flip() + theme_paper()
df_1 <- full_statistics[,c("Sample", "reads_on_hk", "reads_on_X")]
df_2 <- summarized_count_numbers_df[,c("Sample", "genes_hk", "genes_X")]
colnames(df_2) <- colnames(df_1)
rbind(df_1, df_2) %>%
ggplot(aes(x = Sample, y = reads_on_hk)) + geom_point() + coord_flip() + theme_paper()
rbind(df_1, df_2) %>%
ggplot(aes(x = Sample, y = reads_on_X)) + geom_point() + coord_flip() + theme_paper()
pseudobulks
head9pseudobulks)
cor(pseudobulks)
pheatmap(cor(pseudobulks))
library(GGally)
ggpairs(iris, aes(colour = Species, alpha = 0.4))
install.packages("GGally")
library(GGally)
ggpairs(iris, aes(colour = Species, alpha = 0.4))
ggpairs(pseudobulks, aes(alpha = 0.4))
pseudobulks
ggpairs(data.frame(pseudobulks), aes(alpha = 0.4))
ggpairs(data.frame(pseudobulks[target_genes_hk$Name, ]), aes(alpha = 0.4))
full_statistics
df_2
summarized_count_numbers_df
ggpairs(data.frame(pseudobulks[target_genes_hk$Name, ]), aes(alpha = 0.4)) + scale_x_log10() + scale_y_log10()
ggpairs(data.frame(pseudobulks[target_genes_hk$Name, ]), aes(alpha = 0.4)) + scale_x_log10() + scale_y_log10() + coord_fixed()
head(target_genes_hk)
ggpairs(data.frame(pseudobulks[target_genes_X$Name, ]), aes(alpha = 0.4)) + scale_x_log10() + scale_y_log10() + coord_fixed()
x_genes_detected <- intersect(target_genes_X$Name, rownames(pseudobulks))
ggpairs(data.frame(pseudobulks[x_genes_detected, ]), aes(alpha = 0.4)) + scale_x_log10() + scale_y_log10() + coord_fixed()
ggpairs(data.frame(pseudobulks[x_genes_detected, ])[,1:3], aes(alpha = 0.4)) + scale_x_log10() + scale_y_log10() + coord_fixed()
ggpairs(data.frame(pseudobulks[x_genes_detected, ])[,1:3], aes(alpha = 0.4)) + scale_x_log10() + scale_y_log10() + coord_fixed() + geom_abline()
ggpairs(data.frame(pseudobulks[x_genes_detected, ])[,1:3], aes(alpha = 0.4)) + scale_x_log10() + scale_y_log10() + coord_fixed()
ggpairs(data.frame(pseudobulks[x_genes_detected, ])[,1:3], aes(alpha = 0.4))
ggpairs(data.frame(pseudobulks[x_genes_detected, ])[,1:3], aes(alpha = 0.4)) + scale_x_log10() + scale_y_log10()
counts(sce.here[target_genes_hk$Name, ])
make_pseudobulk <- function(sce, metadata_column){
unique_idns <- unique(colData(sce)[,metadata_column])
print(unique_idns)
collapsed_data <- lapply(unique_idns, function(x){
rowMeans(logcounts(sce[,colData(sce)[,metadata_column] == x]))
})
collapsed_data <- data.frame(do.call("cbind", collapsed_data))
colnames(unique_idns)
collapsed_data
}
table(sce.all$Sample)
pseudobulk_x_genes <- make_pseudobulk(sce.all[target_genes_hk$Name, ], sce.all$Sample)
make_pseudobulk
pseudobulk_x_genes <- make_pseudobulk(sce.all[target_genes_hk$Name, ], "Sample")
head(pseudobulk_x_genes)
cor(pseudobulk_x_genes)
ggpairs(pseudobulk_x_genes)
ggpairs(pseudobulk_x_genes[,1:6])
pseudobulk_hk_genes <- make_pseudobulk(sce.all[target_genes_hk$Name, ], "Sample")
pseudobulk_X_genes <- make_pseudobulk(sce.all[target_genes_X$Name, ], "Sample")
View(pseudobulk_hk_genes)
ggpairs(pseudobulk_hk_genes[,1:6])
ggpairs(pseudobulk_X_genes[,1:6])
ggpairs(pseudobulk_X_genes[,1:6]) + scale_y_log10() + scale_x_log10()
ggpairs(pseudobulk_X_genes[,1:6]) + scale_y_log10() + scale_x_log10() + geom_abline()
ggpairs
??ggpairs
ggpairs(pseudobulk_X_genes[,1:6], ) + scale_y_log10() + scale_x_log10()
head(pseudobulks)
full_statistics$Sample
dim(pseudobulk_X_genes)
cbind(pseudobulk_X_genes[,1:3], data.frame(pseudobulks[x_genes_detected, ])[,c(2, 5, 8)])
cbind(pseudobulk_X_genes[x_genes_detected,1:3], data.frame(pseudobulks[x_genes_detected, ])[,c(2, 5, 8)])
cbind(pseudobulk_X_genes[x_genes_detected,1:3], data.frame(pseudobulks[x_genes_detected, ])[,c(2, 5, 8)]) %>%
ggpairs()
cbind(pseudobulk_X_genes[x_genes_detected,1:3], data.frame(pseudobulks[x_genes_detected, ])[,c(2, 5, 8)])
tt <- cbind(pseudobulk_X_genes[x_genes_detected,1:3], data.frame(pseudobulks[x_genes_detected, ])[,c(2, 5, 8)]) %>%
ggpairs()
tt <- cbind(pseudobulk_X_genes[x_genes_detected,1:3], data.frame(pseudobulks[x_genes_detected, ])[,c(2, 5, 8)])
colnames(tt) <- c("Sample1", "Smaple2", "Sample3", "TAP no TSO", "TAP amp", "TAP unamp")
ggpairs(tt)
ggpairs(tt) + scale_y_log10() + scale_x_log10()
make_pseudobulk
make_pseudobulk <- function(sce, metadata_column){
unique_idns <- unique(colData(sce)[,metadata_column])
print(unique_idns)
collapsed_data <- lapply(unique_idns, function(x){
rowSums(counts(sce[,colData(sce)[,metadata_column] == x]))
})
collapsed_data <- data.frame(do.call("cbind", collapsed_data))
colnames(unique_idns)
collapsed_data
}
pseudobulk_hk_genes <- make_pseudobulk(sce.all[target_genes_hk$Name, ], "Sample")
pseudobulk_X_genes <- make_pseudobulk(sce.all[target_genes_X$Name, ], "Sample")
ggpairs(pseudobulk_hk_genes[,1:6])
ggpairs(tt) + scale_y_log10() + scale_x_log10()
pseudobulk_hk_genes
pseudobulk_X_genes
ggpairs(pseudobulk_hk_genes[,1:6])
ggpairs(pseudobulk_X_genes[,1:6], ) + scale_y_log10() + scale_x_log10()
ggpairs(pseudobulk_X_genes[,1:6], ) + scale_y_log10() + scale_x_log10()
x_genes_detected <- intersect(target_genes_X$Name, rownames(pseudobulks))
ggpairs(data.frame(pseudobulks[x_genes_detected, ]), aes(alpha = 0.4)) + scale_x_log10() + scale_y_log10()
tt <- cbind(pseudobulk_X_genes[x_genes_detected,1:3], data.frame(pseudobulks[x_genes_detected, ])[,c(2, 5, 8)])
colnames(tt) <- c("Sample1", "Smaple2", "Sample3", "TAP no TSO", "TAP amp", "TAP unamp")
ggpairs(tt) + scale_y_log10() + scale_x_log10()
head(pseudobulk_X_genes)
unique(sce.all$Sample)
unique(sce.all$Sample) == "ILSE_23364_Sample1"
